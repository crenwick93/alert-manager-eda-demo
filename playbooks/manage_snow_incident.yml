---
- name: Manage Service Now incidents
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    ################################################################################################
    ##############################   CREATING INCIDENTS  ###########################################

    # Create ServiceNow incident and set incident_sys_id so it's accessible in workflow or rulebook
    - name: Create a ServiceNow incident
      servicenow.itsm.incident:
        state: new
        caller: "eda_user"
        short_description: "{{ short_description }}"
        description: "{{ description }}"
        impact: "{{ impact }}"
        urgency: "{{ urgency }}"
        other:
          correlation_id: "{{ alert_fingerprint }}"
      register: create_incident
      tags:
        - create_incident

    - name: Consolidate all facts and original event into set_stats
      ansible.builtin.set_stats:
        data:
          incident_sys_id: "{{ create_incident.record.sys_id }}"
          eda_event: "{{ original_event | default({}) }}"
      tags:
        - create_incident

    ################################################################################################
    ##############################   UPDATING INCIDENTS  ###########################################

    # Update state and work notes on ServiceNow incident
    - name: Update state and work notes on ServiceNow incident
      servicenow.itsm.incident:
        sys_id: "{{ incident_sys_id }}"
        state: 2 # In Progress
        other:
          work_notes: "{{ work_notes }}"
      tags:
        - update_incident
      register: update_incident

    - name: Slurp sosreport from remote host
      ansible.builtin.slurp:
        src: "{{ sos_report_path }}"
      delegate_to: "{{ target_host }}"
      register: sos_report_slurped
      when: sos_report_path is defined
      tags:
        - update_incident

    - name: Save slurped sosreport to local disk
      copy:
        content: "{{ sos_report_slurped.content | b64decode }}"
        dest: "/tmp/{{ sos_report_path | basename }}"
      when: sos_report_path is defined
      tags:
        - update_incident

    - name: test
      command: "ls /tmp/"
      register: test
      delegate_to: "{{ target_host }}"
      when: sos_report_path is defined
      tags:
        - update_incident

    - name: test print
      debug:
        var: test
      delegate_to: "{{ target_host }}"
      when: sos_report_path is defined
      tags:
        - update_incident

    # # Download sos report to localhsot if one has been generated
    # - name: Fetch sosreport from {{ target_host }} to local
    #   ansible.builtin.fetch:
    #     src: "{{ sos_report_path }}"
    #     dest: "/tmp/sosreports/"
    #     flat: yes
    #   delegate_to: "{{ target_host }}"
    #   when: sos_report_path is defined
    #   tags:
    #     - update_incident

    # Attach sos report if one has been generated
    - name: Upload sosreport if one has been generated
      servicenow.itsm.incident:
        sys_id: "{{ incident_sys_id }}"
        attachments:
          - name: sos_report_{{ instance }}
            path: "{{ sos_report_path }}"
      when: sos_report_path is defined
      tags:
        - update_incident


    ################################################################################################
    ##############################   RESOLVING INCIDENTS  ###########################################

    # Resolve the ServiceNow incident with resolution information
    - name: Resolve the ServiceNow incident
      servicenow.itsm.incident:
        sys_id: "{{ incident_sys_id }}"
        state: 6  # 6 = Resolved
        close_notes: "Issue automatically resolved by Event-Driven Ansible"
        close_code: "eda_resolved" # custom created close code (System Definition > Choice Lists) in SNOW
        other:
          resolved_by: "eda_user"
      tags:
        - resolve_incident
      register: resolve_incident
