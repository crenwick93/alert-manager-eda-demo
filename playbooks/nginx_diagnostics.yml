---
- name: Run diagnostics on nginx host
  hosts: demo-app-nginx
  gather_facts: false
  become: true
  vars:
    report_lines: []
    nginx_active: false
    firewall_active: false
    nginx_config_ok: false
    port_443_open: false

  tasks:
    - name: Check if nginx service is active
      ansible.builtin.systemd:
        name: nginx
      register: nginx_status

    - name: Update nginx_active
      ansible.builtin.set_fact:
        nginx_active: "{{ nginx_status.status.ActiveState == 'active' }}"
        report_lines: "{{ report_lines + ['Nginx service active: ' ~ (nginx_status.status.ActiveState == 'active') | string] }}"

    - name: Check if firewall is active
      ansible.builtin.systemd:
        name: firewalld
      register: firewall_status
      ignore_errors: true

    - name: Update firewall_active
      when: firewall_status.status is defined
      ansible.builtin.set_fact:
        firewall_active: "{{ firewall_status.status.ActiveState == 'active' }}"
        report_lines: >-
          {{ report_lines + [
            'Firewall active: ' ~ (firewall_status.status.ActiveState == 'active') | string
          ] + ([ 'Firewall check failed: ' ~ firewall_status.msg ] if firewall_status.failed else []) }}

    - name: Check nginx config syntax
      ansible.builtin.command:
        cmd: nginx -t
      register: nginx_config_check
      changed_when: false
      ignore_errors: true

    - name: Update nginx_config_ok
      ansible.builtin.set_fact:
        nginx_config_ok: "{{ not nginx_config_check.failed and 'successful' in (nginx_config_check.stdout | default('')) }}"
        report_lines: >-
          {{ report_lines + [
            'Nginx config test successful: ' ~ nginx_config_ok | string
          ] + ([ 'Nginx config test failed: ' ~ (nginx_config_check.stderr | default('no error output')) ] if nginx_config_check.failed else []) }}

    - name: Check if nginx is listening on port 443
      ansible.builtin.wait_for:
        port: 443
        state: started
        timeout: 2
      register: port_443_check
      ignore_errors: true

    - name: Update port_443_open
      ansible.builtin.set_fact:
        port_443_open: "{{ port_443_check is succeeded }}"
        report_lines: >-
          {{ report_lines + [
            'Port 443 open: ' ~ port_443_open | string
          ] + ([ 'Port 443 check failed: ' ~ (port_443_check.msg | default('no error output')) ] if port_443_check.failed else []) }}

    - name: Assemble final report string
      ansible.builtin.set_fact:
        diagnostics_report_text: "{{ report_lines | join('\n') }}"

    - name: Encode report to base64
      ansible.builtin.set_fact:
        diagnostics_report_b64: "{{ diagnostics_report_text | b64encode }}"

    - name: Set structured and raw report as stats
      ansible.builtin.set_stats:
        data:
          diagnostics_report_b64: "{{ diagnostics_report_b64 }}"
          nginx_service_active: "{{ nginx_active }}"
          firewall_active: "{{ firewall_active }}"
          nginx_config_ok: "{{ nginx_config_ok }}"
          port_443_open: "{{ port_443_open }}"
